Title: Epiverse Package Dependency Guidelines

Introduction:
The Epiverse community recognizes the importance of carefully selecting dependencies for packages. To provide clear guidance, this document presents a set of guidelines for managing dependencies in Epiverse packages. These guidelines consider factors such as functionality, efficiency, compatibility, maintainability, and community standards. Following these guidelines ensures that Epiverse packages create a robust and harmonious package ecosystem.

Key Considerations for Dependencies:
When evaluating dependencies, there are several key considerations to keep in mind, aimed at improving both the end-user experience and the maintainer experience. It is essential to strike a balance between enhancing package performance, ease of use, installation, and long-term maintainability.

Minimizing Dependencies and Prioritizing Stability:
The primary objective is to minimize dependencies, except when they offer significant benefits. This approach ensures that Epiverse packages remain lightweight and minimize potential compatibility issues. Prioritize well-established packages with a strong track record on CRAN, as they demonstrate reliability and maintainability, providing a smooth user experience.

Caution with External Libraries and System Dependencies:
Exercise caution when relying on dependencies that require external libraries, as they can pose challenges on shared computing platforms where users lack super-user privileges. While such dependencies may offer valuable functionality, it is important to consider alternative solutions or consult with platform administrators to address potential issues.

Input Checking and Error Messaging:
Implementing input checking is crucial for user-facing functions to identify errors early and enhance code robustness. Base R provides effective functionality for input checking, such as using stopifnot() with named arguments. Consider utility packages like checkmate to streamline the process, especially for multilingual packages. Prioritize code simplicity, maintainability, and compatibility.

Consideration for Tidyverse vs. Base R:
When deciding between the tidyverse and base R, consider the package's position in the software stack. Low-level packages focusing on underlying functionality should minimize dependencies and rely on base R. However, for high-level packages used by data analysts leveraging the tidyverse, incorporating tidyverse packages can provide a seamless and familiar user experience.

Selective Use of data.table:
Evaluate the potential benefits of data.table as a dependency based on specific use cases. Consider data.table when extensive data wrangling and performance optimization are crucial. Use data.table judiciously, applying it only to packages where it significantly improves maintainability and performance.

Additional Recommendations:
Trust individual developer choices while ensuring that they can justify the choice of taking on a dependency. When in doubt, raise an issue to discuss with others and explore alternative options. While not necessary for all cases, including discussions on dependencies in design vignettes or documentation can provide clarity. Consider using hard, objective metrics to guide dependency choices, striking a balance between flexibility and standardization.

Conclusion:
These guidelines provide a framework for Epiverse package developers to make informed decisions about dependencies. By minimizing dependencies, prioritizing stability, considering external library challenges, implementing input checking, and carefully evaluating the use of data.table, Epiverse packages can deliver efficient and reliable solutions. These guidelines promote a consistent and sustainable package ecosystem that benefits both developers and users within the Epiverse community.
